{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","img","ingredients","className","style","recipe","tit","orderlist","map","ingredient","key","text","parag","image","src","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","URL","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,IAAM,oBAAoB,MAAQ,sBAAsB,MAAQ,sBAAsB,UAAY,4B,6MCuBrIC,EApBA,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,MAAMC,EAA4B,EAA5BA,SAASC,EAAmB,EAAnBA,IAAIC,EAAe,EAAfA,YAChC,OAEI,yBAAKC,UAAWC,IAAMC,QAClB,wBAAIF,UAAWC,IAAME,KAAOP,GAC5B,wBAAII,UAAWC,IAAMG,WAChBL,EAAYM,KAAI,SAAAC,GAAU,OACvB,wBAAIC,IAAKD,EAAWE,KAAMR,UAAWC,IAAMQ,OAAQH,EAAWE,UAGtE,yBAAKR,UAAWC,IAAMS,MAAOC,IAAKb,IAClC,uBAAGE,UAAWC,IAAMQ,OAApB,aAAsCZ,KCkDnCe,G,MA7DH,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAETC,EAFS,KAEAC,EAFA,OAGYF,mBAAS,IAHrB,mBAGTG,EAHS,KAGDC,EAHC,OAIUJ,mBAAS,UAJnB,mBAITK,EAJS,KAIFC,EAJE,KASVC,EAAG,0CAAsCF,EAAtC,mBAHM,WAGN,oBAFO,oCAMhBG,qBAAU,WACRC,MAEC,CAACJ,IACJ,IAAMI,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAMJ,GADZ,cACXK,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAHC,2CAAH,qDAqBhB,OACE,yBAAK5B,UAAU,OACb,0BAAM6B,SATQ,SAAAC,GAChBA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,KAMmBjB,UAAU,eACnC,2BAAOA,UAAU,aAAagC,KAAK,OAAOC,MAAOjB,EAAQkB,SAhB1C,SAAAJ,GACnBb,EAAUa,EAAEK,OAAOF,UAgBf,4BAAQjC,UAAU,gBAAgBgC,KAAK,UAAvC,UAEF,yBAAKhC,UAAU,WACZc,EAAQT,KAAI,SAAAH,GAAM,OAEjB,kBAAC,EAAD,CACEK,IAAKL,EAAOA,OAAOkC,MACnBxC,MAAOM,EAAOA,OAAOkC,MACrBvC,SAAUK,EAAOA,OAAOL,SACxBC,IAAKI,EAAOA,OAAOQ,MACnBX,YAAaG,EAAOA,OAAOH,qBC5CnBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af8b0a12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"tit\":\"recipe_tit__15Jw_\",\"parag\":\"recipe_parag__1jzcq\",\"image\":\"recipe_image__BtdIE\",\"orderlist\":\"recipe_orderlist__llWD_\"};","import React from 'react';\n\nimport style from './recipe.module.css'\n\nconst Recipe = ({title,calories,img,ingredients})=>{\n    return(\n\n        <div className={style.recipe}>\n            <h1 className={style.tit} >{title}</h1>\n            <ol className={style.orderlist}>\n                {ingredients.map(ingredient=>(\n                    <li key={ingredient.text} className={style.parag}>{ingredient.text}</li>\n                ))}\n            </ol>\n            <img className={style.image} src={img}/>\n            <p className={style.parag}>Calories: {calories}</p>\n\n        </div>\n\n\n    );\n}\n\n\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './App.scss';\n\nconst App = () => {\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState(\"banana\")\n\n  const APP_ID = '11e7724f';\n  const APP_KEY = 'ac1a0494c8a14559981191ecec2cf10c';\n\n  const URL = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n\n\n  useEffect(() => {\n    getRecipes();\n\n  }, [query]);\n  const getRecipes = async () => {\n    const response = await fetch(URL)\n    const data = await response.json();\n    setRecipes(data.hits);\n    // console.log(data.hits);\n\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    // console.log(search);\n\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\">click</button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            img={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}